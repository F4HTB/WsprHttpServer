#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#import faulthandler; faulthandler.enable()
from http.server import HTTPServer as BaseHTTPServer, SimpleHTTPRequestHandler
import urllib.parse
import time
import os, sys
from ctypes import *
from ctypes.util import find_library
import serial
import pynmea2
import time
import configparser
import subprocess
import threading  
import signal

### Configuration ###########################################################################

Config_file='wsprhttp.conf'
config = configparser.ConfigParser()
config.read(Config_file)
flogf = open(config['SERVER']['log_file'], "a")

def addlog(txt):
	print(txt)
	global flogf
	flogf.write(time.strftime("%d %m %Y %H:%M:%S ", time.gmtime()) + txt+"\r\n")
	flogf.flush()
	

###########################################################################

### System command ###########################################################################

def prog_restart():
	webServer.server_close()
	time.sleep(5)
	os.system(sys.argv[0])
	exit()

###########################################################################

### GPS ###########################################################################


def readgpsserial():
	serialPort = serial.Serial(config['GPS']['serialport'], baudrate = int(config['GPS']['baudrate']), timeout = float(config['GPS']['timeout']))
	mgps=""
	while (mgps.find('GGA') < 0):
		try:
			mgps =  serialPort.readline().decode('utf-8')
		except:
			pass
	serialPort.close()
	msg = pynmea2.parse(mgps)
	msg.timestamp = msg.timestamp.strftime("%H:%M:%S")
	return msg
	

###########################################################################

### wspr ###########################################################################

WSPRstatus = {
	"RUN": "False",
	"TRANSMITTING":"False",
	"PPM": "0",
	"MODE": "No",
	"FREQUENCY":"0",
	"LOGS":""
}

WSPRT=""
WSPRT_data_lock = threading.Lock()
class WSPRThread (threading.Thread):
	def __init__(self, ComArgs):      
		threading.Thread.__init__(self) 
		addlog("Wspr init thread with "+" ".join(ComArgs))
		self.ComArgs = ComArgs
		self.WSPRlog=[]
		
		
	def run(self):
		global WSPRstatus 
		global WSPRT_data_lock
		self.WSPRPross = subprocess.Popen(self.ComArgs, shell = False, stdout = subprocess.PIPE, encoding = 'ascii')
		WSPRstatus["RUN"]="True"
		for line in iter(self.WSPRPross.stdout.readline,''):
			line=line.rstrip()
			addlog(line)
			with WSPRT_data_lock:
				if "ppm" in line:
					WSPRstatus["PPM"]=line.split(":")[1]
				if "TX started" in line or "Transmitting test" in line:
					WSPRstatus["TRANSMITTING"]=line 
				if "Waiting for next WSPR transmission window" in line:
					WSPRstatus["TRANSMITTING"]=line
				if "frequency " in line and "tone" in line and " MHz" in line:
					WSPRstatus["MODE"]="tone"
					WSPRstatus["FREQUENCY"]=self.search_info("frequency ", " MHz", line)
				if "frequency " in line and "WSPR" in line and " MHz" in line:
					WSPRstatus["MODE"]="wspr"
					WSPRstatus["FREQUENCY"]=self.search_info("transmission: ", " MHz", line)
					
				while len(self.WSPRlog) >25:
					del self.WSPRlog[:-1]
				self.WSPRlog.append(line)
		WSPRterminate()
				
	def search_info(self,pat1,pat2,s):
		start = s.find(pat1) + len(pat1)
		end = s.find(pat2)
		return str(s[start:end])

	def getlog(self):
		global WSPRstatus 
		global WSPRT_data_lock
		logs = "<br>".join(self.WSPRlog)
		with WSPRT_data_lock:
			WSPRstatus["LOGS"]=logs
		
	def kill(self):
		global WSPRstatus 
		global WSPRT_data_lock
		addlog("WSPR Process endind!")
		self.WSPRPross.send_signal(signal.SIGINT)
		self.WSPRPross.kill()
		self.WSPRPross.terminate()
		with WSPRT_data_lock:
			WSPRstatus["RUN"]="False"
			WSPRstatus["PPM"]="0"
			WSPRstatus["MODE"]="No"
			WSPRstatus["FREQUENCY"]="0"
			WSPRstatus["LOGS"]=""
			WSPRstatus["TRANSMITTING"]="False"

def WSPRLunchR():
	global WSPRT
	if type(WSPRT) == str:
		WSPRstatus["MODE"]="wspr"
		args = [config["BEACON"]["wsprexec"],'-s','-r',config["BEACON"]["callsign"],config["BEACON"]["locator"],config["BEACON"]["tx_pwr_dbm"]]
		args.extend(config["BEACON"]["frequencies"].split(" "))
		WSPRT = WSPRThread(args)
		WSPRT.start()
	return "OK"
	
def WSPRLunchTT(freq):
	global WSPRT
	if type(WSPRT) == str:
		WSPRT = WSPRThread([config["BEACON"]["wsprexec"],'-s','-t',freq])
		WSPRT.start()
	return "OK"
	
def WSPRGetStdout():
	global WSPRT
	if type(WSPRT) != str:
		WSPRT.getlog()
	global WSPRT_data_lock
	with WSPRT_data_lock:
		global WSPRstatus
		addlog("Wspr Try to get info")
		stat = (",".join("=".join(_) for _ in WSPRstatus.items()))
	return stat

def WSPRterminate():
	global WSPRT
	if type(WSPRT) != str:
		WSPRT.kill()
		WSPRT=""
	return "WSPRterminate"
		
###########################################################################

### HTTP server ###########################################################################

web_dir = os.path.join(os.path.dirname(__file__), 'www')
class HTTPHandler(SimpleHTTPRequestHandler):
	"""This handler uses server.base_path instead of always using os.getcwd()"""
	def translate_path(self, path):
		path = SimpleHTTPRequestHandler.translate_path(self, path)
		relpath = os.path.relpath(path, os.getcwd())
		fullpath = os.path.join(self.server.base_path, relpath)
		return fullpath

	def send_msg(self,msg):
		msg=str(repr(msg))
		addlog("send:   "+self.client_address[0]+"   "+msg)
		self.send_response(200)
		self.send_header("Content-type", "text/html")
		self.end_headers()
		self.wfile.write(bytes(msg, "utf-8"))
		return True
		
	def do_GET(self):
		addlog("receive:   "+self.client_address[0]+"   "+self.path)
		if(self.path.find('SG') > 0):
			msg=""
			if self.path.endswith("/SGhello"):
				self.send_msg("<html><head><title>https://pythonbasics.org</title></head><p>Request: %s</p><body><p>This is an example web server.</p></body></html>" % self.path)
			elif self.path.endswith("/SGrestart"):
				prog_restart()
			elif self.path.endswith("/SGgps"):
				self.send_msg(readgpsserial())
			elif self.path.endswith("/SGWsprGo"):
				self.send_msg(WSPRLunchR())
			elif self.path.find('SGWsprGoTone') > 0:
				self.send_msg(WSPRLunchTT(urllib.parse.unquote(self.path)[14:]))
			elif self.path.endswith("/SGWsprStatus"):
				self.send_msg(WSPRGetStdout())
			elif self.path.endswith("/SGWsprEnd"):
				self.send_msg(WSPRterminate())
			elif self.path.endswith("/SGGetConf"):
				for x in config.sections():
					for _ in config[x].items():
						msg+=x+":"+"=".join(_)+"+"
				self.send_msg(msg[:-1])
			elif (self.path.find('SGSetConf') > 0):
				for x in (urllib.parse.unquote(self.path)[11:].split('+')):
					if x.find('='):
						(s,o)=x.split("=")
						(v,s)=s.split(":")
						if config.has_option(v,s):
							config[v][s]=o
						addlog("Setconf "+v+" "+s+" "+o)
						global Config_file
						with open(Config_file, 'w') as configfile:
							config.write(configfile)
				self.send_msg("Config applied! You must click to Restart for apply some change.")

		else:
			return SimpleHTTPRequestHandler.do_GET(self)

	

class HTTPServer(BaseHTTPServer):
	"""The main server, you pass in base_path which is the path you want to serve requests from"""
	def __init__(self, base_path, server_address, RequestHandlerClass=HTTPHandler):
		self.base_path = base_path
		BaseHTTPServer.__init__(self, server_address, RequestHandlerClass)

###########################################################################


### main ###########################################################################

if __name__ == "__main__":	
	global webServer
	
	addlog("Start webserver")
	webServer = HTTPServer(web_dir, ("", int(config['SERVER']['port'])))
	addlog("Server started on %s" % (int(config['SERVER']['port'])))

	try:
		webServer.serve_forever()
	except KeyboardInterrupt:
		pass

	webServer.server_close()
	flogf.close()
	addlog("Server stopped.")